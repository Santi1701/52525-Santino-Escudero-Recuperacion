import LogicaVisitor from './LogicaVisitor.js';

export default class TraductorJS extends LogicaVisitor {
    constructor() {
        super();
        this._symbolNames = null;
        this.debug = true;
    }

    setSymbolNames(names) {
        this._symbolNames = names;
    }

    log(message, data = null) {
        if (this.debug) {
            console.log(`[TraductorJS] ${message}`);
            if (data) console.log(data);
        }
    }

    visitTerminal(node) {
        this.log(`Token encontrado: ${node.getText()}`, {
            type: this._symbolNames ? this._symbolNames[node.symbol.type] : node.symbol.type,
            line: node.symbol.line
        });
        return node.getText();
    }

    visitPrograma(ctx) {
        this.log('Iniciando traducción del programa');
        try {
            const usuarios = ctx.usuario().map((usuario, index) => {
                this.log(`Procesando usuario #${index + 1}`);
                return this.visitUsuario(usuario);
            });
            
            const result = `// Generated by LogicaJS\nconst usuarios = [\n${usuarios.join(',\n')}\n];`;
            this.log('Traducción completada con éxito', result);
            return result;
        } catch (error) {
            console.error('Error durante la traducción:', error);
            throw error;
        }
    }

    visitUsuario(ctx) {
        this.log('Visitando nodo usuario');
        const nombre = this.visit(ctx.identificador());
        this.log(`Nombre de usuario: ${nombre}`);
        
        const atributos = ctx.atributo().map((attr, index) => {
            this.log(`Procesando atributo #${index + 1}`);
            return this.visitAtributo(attr);
        }).join(',\n    ');
        
        const result = `  {
    nombre: "${nombre}",
    ${atributos}
  }`;
        this.log('Usuario procesado', result);
        return result;
    }

    visitAtributo(ctx) {
        const nombre = this.visit(ctx.identificador());
        this.log(`Procesando atributo '${nombre}'`);
        
        const valor = this.visitValor(ctx.valor());
        this.log(`Valor del atributo '${nombre}':`, valor);
        
        return `    ${nombre}: ${valor}`;
    }

    visitValor(ctx) {
        this.log('Visitando nodo valor');
        if (ctx.numero()) {
            this.log('Tipo: número');
            return this.visitNumero(ctx.numero());
        }
        if (ctx.cadena()) {
            this.log('Tipo: cadena');
            return this.visitCadena(ctx.cadena());
        }
        if (ctx.booleano()) {
            this.log('Tipo: booleano');
            return this.visitBooleano(ctx.booleano());
        }
        
        console.warn('Tipo de valor desconocido, usando null');
        return 'null';
    }

    visitNumero(ctx) {
        const num = ctx.NUMERO().getText();
        this.log(`Número encontrado: ${num}`);
        return num;
    }

    visitCadena(ctx) {
        const caracteres = ctx.caracter().map(c => {
            const text = c.getText();
            this.log(`Caracter en cadena: ${text}`);
            return text;
        }).join(' ');
        
        const result = `"${caracteres}"`;
        this.log(`Cadena completa: ${result}`);
        return result;
    }

    visitBooleano(ctx) {
        const value = ctx.VERDADERO() ? 'verdadero' : 'falso';
        const jsValue = ctx.VERDADERO() ? 'true' : 'false';
        this.log(`Booleano encontrado: ${value} -> ${jsValue}`);
        return jsValue;
    }

    visitIdentificador(ctx) {
        const id = ctx.IDENTIFICADOR().getText();
        this.log(`Identificador encontrado: ${id}`);
        return id;
    }
}